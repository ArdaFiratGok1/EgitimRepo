@model EgitimMaskotuApp.Models.ProgressModel

@{
    ViewData["Title"] = "İlerleme Raporu";
}

<div class="container mt-4">
    <!-- Ana Başlık -->
    <div class="row mb-5">
        <div class="col-12 text-center">
            <div class="hero-section">
                <div class="hero-icon mb-4">
                    <i class="fas fa-chart-line fa-4x text-primary"></i>
                </div>
                <h1 class="display-4 fw-bold mb-3 text-primary">İlerleme Raporu</h1>
                <p class="lead text-muted">
                    <i class="fas fa-map-marked-alt me-2"></i>
                    "@Model.Session.MainTopic" yol haritasındaki ilerlemen
                </p>
            </div>
        </div>
    </div>

    <!-- AI Değerlendirmesi -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="ai-analysis-card card shadow-lg border-0" style="border-radius: 25px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <div class="card-body p-5 text-white">
                    <div class="d-flex align-items-start">
                        <div class="ai-avatar me-4">
                            <div class="avatar-circle">
                                <i class="fas fa-robot fa-3x"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="fw-bold mb-3">
                                <i class="fas fa-sparkles me-2"></i>
                                AI Değerlendirmesi
                            </h5>
                            <p class="mb-0 lead" style="line-height: 1.8;">
                                @Model.ProgressAnalysis
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- İstatistik Kartları -->
    <div class="row mb-5">
        <div class="col-md-3 mb-4">
            <div class="stat-card card border-0 shadow-lg h-100" style="border-radius: 20px;">
                <div class="card-body text-center p-4">
                    <div class="stat-icon mb-3">
                        <div class="icon-circle bg-success">
                            <i class="fas fa-check-circle fa-3x text-white"></i>
                        </div>
                    </div>
                    <div class="stat-content">
                        <h2 class="stat-number text-success fw-bold mb-2">
                            @Model.CompletedNodes.Count<span class="text-muted fs-4">/@Model.Session.Nodes.Count</span>
                        </h2>
                        <p class="stat-label text-muted mb-0">Tamamlanan Konu</p>
                    </div>
                    <div class="progress mt-3" style="height: 8px;">
                        <div class="progress-bar bg-success progress-bar-striped progress-bar-animated"
                             style="width: @(((double)Model.CompletedNodes.Count / Model.Session.Nodes.Count) * 100)%">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-4">
            <div class="stat-card card border-0 shadow-lg h-100" style="border-radius: 20px;">
                <div class="card-body text-center p-4">
                    <div class="stat-icon mb-3">
                        <div class="icon-circle bg-primary">
                            <i class="fas fa-percentage fa-3x text-white"></i>
                        </div>
                    </div>
                    <div class="stat-content">
                        <h2 class="stat-number text-primary fw-bold mb-2">@Model.CompletionPercentage%</h2>
                        <p class="stat-label text-muted mb-0">Tamamlama Yüzdesi</p>
                    </div>
                    <div class="circular-progress mt-3">
                        <div class="progress-circle" data-percentage="@Model.CompletionPercentage">
                            <div class="progress-text">@Model.CompletionPercentage%</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-4">
            <div class="stat-card card border-0 shadow-lg h-100" style="border-radius: 20px;">
                <div class="card-body text-center p-4">
                    <div class="stat-icon mb-3">
                        <div class="icon-circle bg-info">
                            <i class="fas fa-clock fa-3x text-white"></i>
                        </div>
                    </div>
                    <div class="stat-content">
                        <h2 class="stat-number text-info fw-bold mb-2">@(Model.TotalTimeSpentMinutes)</h2>
                        <p class="stat-label text-muted mb-0">Dakika Harcandı</p>
                    </div>
                    <div class="time-visualization mt-3">
                        <div class="time-bars">
                            <div class="time-bar" style="height: @(Math.Min(Model.TotalTimeSpentMinutes / 10, 40))px;"></div>
                            <div class="time-bar" style="height: @(Math.Min(Model.TotalTimeSpentMinutes / 8, 35))px;"></div>
                            <div class="time-bar" style="height: @(Math.Min(Model.TotalTimeSpentMinutes / 6, 30))px;"></div>
                            <div class="time-bar" style="height: @(Math.Min(Model.TotalTimeSpentMinutes / 4, 25))px;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-4">
            <div class="stat-card card border-0 shadow-lg h-100" style="border-radius: 20px;">
                <div class="card-body text-center p-4">
                    <div class="stat-icon mb-3">
                        <div class="icon-circle bg-warning">
                            <i class="fas fa-bullseye fa-3x text-white"></i>
                        </div>
                    </div>
                    <div class="stat-content">
                        <h2 class="stat-number text-warning fw-bold mb-2">@(Model.Session.Nodes.Count - Model.CompletedNodes.Count)</h2>
                        <p class="stat-label text-muted mb-0">Kalan Konu</p>
                    </div>
                    <div class="remaining-visualization mt-3">
                        <div class="remaining-circle">
                            <div class="remaining-inner">
                                @(Model.Session.Nodes.Count - Model.CompletedNodes.Count)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Test Geçmişi -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="quiz-history-card card shadow-lg border-0" style="border-radius: 20px;">
                <div class="card-header text-white py-4" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); border-radius: 20px 20px 0 0;">
                    <h5 class="mb-0 fw-bold">
                        <i class="fas fa-check-double me-2"></i>
                        Çözülen Testler
                    </h5>
                </div>
                <div class="card-body p-0">
                    @if (Model.QuizHistory != null && Model.QuizHistory.Any())
                    {
                        <div class="quiz-list">
                            @foreach (var test in Model.QuizHistory)
                            {
                                <div class="quiz-item border-bottom p-4 transition-hover">
                                    <div class="row align-items-center">
                                        <div class="col-md-6">
                                            <div class="quiz-info">
                                                <h6 class="quiz-title fw-bold mb-2">
                                                    <i class="fas fa-clipboard-list me-2 text-primary"></i>
                                                    @test.Topic
                                                </h6>
                                                <div class="quiz-details">
                                                    <span class="badge bg-light text-dark me-2">
                                                        <i class="fas fa-calendar me-1"></i>
                                                        @test.CompletedAt.ToString("dd MMMM yyyy")
                                                    </span>
                                                    <span class="badge bg-light text-dark">
                                                        <i class="fas fa-clock me-1"></i>
                                                        @test.CompletedAt.ToString("HH:mm")
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="quiz-score text-center">
                                                <div class="score-circle @(test.Score >= 70 ? "success" : test.Score >= 50 ? "warning" : "danger")">
                                                    <div class="score-text">
                                                        <div class="score-number">@test.Score</div>
                                                        <div class="score-total">/100</div>
                                                    </div>
                                                </div>
                                                <small class="text-muted mt-2 d-block">
                                                    @test.CorrectAnswers/@test.TotalQuestions doğru
                                                </small>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="quiz-duration text-center">
                                                <div class="duration-icon mb-2">
                                                    <i class="fas fa-stopwatch fa-2x text-info"></i>
                                                </div>
                                                <div class="duration-time fw-bold text-info">
                                                    @TimeSpan.FromSeconds(test.TimeSpentSeconds).ToString(@"mm\:ss")
                                                </div>
                                                <small class="text-muted">dakika</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state text-center p-5">
                            <div class="empty-icon mb-4">
                                <i class="fas fa-clipboard-question fa-4x text-muted"></i>
                            </div>
                            <h6 class="text-muted mb-2">Henüz Test Çözülmedi</h6>
                            <p class="text-muted mb-0">Konuları tamamladıktan sonra test çözmeye başlayabilirsiniz.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Tamamlanan Konular -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="completed-topics-card card shadow-lg border-0" style="border-radius: 20px;">
                <div class="card-header text-white py-4" style="background: linear-gradient(135deg, #6610f2 0%, #e83e8c 100%); border-radius: 20px 20px 0 0;">
                    <h5 class="mb-0 fw-bold">
                        <i class="fas fa-tasks me-2"></i>
                        Tamamlanan Konular
                    </h5>
                </div>
                <div class="card-body p-0">
                    @if (Model.CompletedNodes.Any())
                    {
                        <div class="topics-grid">
                            @foreach (var node in Model.CompletedNodes)
                            {
                                <a href="@Url.Action("NodeDetail", new { nodeId = node.Id })"
                                   class="topic-item d-flex align-items-center p-4 border-bottom text-decoration-none transition-hover">
                                    <div class="topic-icon me-4">
                                        <div class="completed-badge">
                                            <i class="fas fa-check-circle text-success fa-2x"></i>
                                        </div>
                                    </div>
                                    <div class="topic-content flex-grow-1">
                                        <h6 class="topic-title fw-bold text-dark mb-1">@node.Title</h6>
                                        <div class="topic-meta">
                                            <span class="badge bg-light text-muted me-2">
                                                <i class="fas fa-folder me-1"></i>
                                                @node.Category
                                            </span>
                                            <span class="badge bg-primary">
                                                <i class="fas fa-signal me-1"></i>
                                                @node.Difficulty
                                            </span>
                                        </div>
                                    </div>
                                    <div class="topic-arrow">
                                        <i class="fas fa-chevron-right text-muted"></i>
                                    </div>
                                </a>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state text-center p-5">
                            <div class="empty-icon mb-4">
                                <i class="fas fa-list-ul fa-4x text-muted"></i>
                            </div>
                            <h6 class="text-muted mb-2">Henüz Tamamlanan Konu Yok</h6>
                            <p class="text-muted mb-0">Öğrenme yolculuğunuza başlamak için dashboard'a dönün.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Navigasyon -->
    <div class="row">
        <div class="col-12 text-center">
            <div class="navigation-section">
                <a href="@Url.Action("Dashboard")" class="btn btn-primary btn-lg px-5 py-3 rounded-pill shadow-lg">
                    <i class="fas fa-arrow-left me-2"></i>
                    Yol Haritasına Dön
                </a>
            </div>
        </div>
    </div>
</div>

<style>
    /* Ana Tasarım */
    .hero-section {
        animation: fadeInUp 0.8s ease-out;
    }

    .hero-icon {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 50%;
        padding: 30px;
        display: inline-block;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
    }

    /* AI Analiz Kartı */
    .ai-analysis-card {
        position: relative;
        overflow: hidden;
    }

        .ai-analysis-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .ai-analysis-card .card-body {
            position: relative;
            z-index: 1;
        }

    .ai-avatar .avatar-circle {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        padding: 20px;
        backdrop-filter: blur(10px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    /* İstatistik Kartları */
    .stat-card {
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
    }

        .stat-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            transition: all 0.6s ease;
            opacity: 0;
        }

        .stat-card:hover::before {
            animation: shimmer 1.5s ease-in-out;
        }

        .stat-card:hover {
            transform: translateY(-15px) scale(1.02);
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
        }

    .icon-circle {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .stat-number {
        font-size: 2.5rem;
        font-weight: 700;
    }

    /* Dairesel Progress */
    .circular-progress {
        position: relative;
        width: 60px;
        height: 60px;
        margin: 0 auto;
    }

    .progress-circle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: conic-gradient(#007bff 0deg, #007bff calc(var(--percentage, 0) * 3.6deg), #e9ecef calc(var(--percentage, 0) * 3.6deg), #e9ecef 360deg);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }

        .progress-circle::before {
            content: '';
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background: white;
            position: absolute;
        }

    .progress-text {
        position: relative;
        z-index: 1;
        font-size: 12px;
        font-weight: bold;
        color: #007bff;
    }

    /* Zaman Visualizasyonu */
    .time-visualization {
        display: flex;
        align-items: end;
        justify-content: center;
        height: 50px;
    }

    .time-bars {
        display: flex;
        align-items: end;
        gap: 4px;
    }

    .time-bar {
        width: 8px;
        background: linear-gradient(to top, #17a2b8, #20c997);
        border-radius: 4px 4px 0 0;
        animation: barGrow 1s ease-out;
    }

    /* Kalan Konu Visualizasyonu */
    .remaining-visualization {
        display: flex;
        justify-content: center;
    }

    .remaining-circle {
        width: 50px;
        height: 50px;
        border: 3px solid #ffc107;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 193, 7, 0.1);
    }

    .remaining-inner {
        font-weight: bold;
        color: #ffc107;
        font-size: 14px;
    }

    /* Test Geçmişi */
    .quiz-history-card, .completed-topics-card {
        transition: all 0.3s ease;
    }

    .quiz-item, .topic-item {
        transition: all 0.3s ease;
        position: relative;
    }

        .quiz-item:hover, .topic-item:hover {
            background: linear-gradient(45deg, #f8f9fa 0%, #e9ecef 100%);
            transform: translateX(10px);
        }

        .quiz-item::before, .topic-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            transition: width 0.3s ease;
        }

        .quiz-item:hover::before, .topic-item:hover::before {
            width: 4px;
        }

    /* Skor Dairesi */
    .score-circle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        position: relative;
        border: 3px solid;
    }

        .score-circle.success {
            border-color: #28a745;
            background: rgba(40, 167, 69, 0.1);
        }

        .score-circle.warning {
            border-color: #ffc107;
            background: rgba(255, 193, 7, 0.1);
        }

        .score-circle.danger {
            border-color: #dc3545;
            background: rgba(220, 53, 69, 0.1);
        }

    .score-text {
        text-align: center;
    }

    .score-number {
        font-size: 18px;
        font-weight: bold;
        line-height: 1;
    }

    .score-total {
        font-size: 12px;
        opacity: 0.7;
    }

    /* Tamamlanan Konular */
    .completed-badge {
        background: rgba(40, 167, 69, 0.1);
        border-radius: 50%;
        padding: 15px;
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.2);
    }

    .topic-arrow {
        transition: all 0.3s ease;
    }

    .topic-item:hover .topic-arrow {
        transform: translateX(5px);
    }

    /* Boş Durum */
    .empty-state {
        animation: fadeInUp 0.6s ease-out;
    }

    .empty-icon {
        opacity: 0.5;
    }

    /* Navigasyon */
    .navigation-section {
        animation: fadeInUp 0.8s ease-out;
    }

    /* Genel Animasyonlar */
    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes shimmer {
        0%

    {
        opacity: 0;
    }

    50% {
        opacity: 1;
    }

    100% {
        opacity: 0;
    }

    }

    @@keyframes barGrow {
        from

    {
        height: 0;
    }

    to {
        height: var(--final-height, 20px);
    }

    }

    /* Buton Animasyonları */
    .btn {
        transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
    }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.2);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255,255,255,0.3);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .btn:hover::before {
            width: 300px;
            height: 300px;
        }

    /* Progress Bar Animasyonu */
    .progress-bar-animated {
        animation: progress-bar-stripes 1s linear infinite;
    }

    @@keyframes progress-bar-stripes {
        0%

    {
        background-position: 0 0;
    }

    100% {
        background-position: 40px 0;
    }

    }

    /* Responsive Düzenlemeler */
    @@media (max-width: 768px) {
        .hero-icon

    {
        padding: 20px;
    }

    .stat-number {
        font-size: 2rem;
    }

    .ai-analysis-card .card-body {
        padding: 2rem !important;
    }

    .quiz-item .row,
    .topic-item {
        flex-direction: column;
        text-align: center;
    }

    .quiz-item .col-md-3,
    .quiz-item .col-md-6 {
        margin-bottom: 1rem;
    }

    }

    /* Kart Girişi Animasyonu */
    .card {
        animation: fadeInUp 0.6s ease-out;
    }

        .card:nth-child(2) {
            animation-delay: 0.1s;
        }

        .card:nth-child(3) {
            animation-delay: 0.2s;
        }

        .card:nth-child(4) {
            animation-delay: 0.3s;
        }

    /* Hover Geçiş Efektleri */
    .transition-hover {
        transition: all 0.3s ease;
    }

    /* Progress Circle Data Attribute */
    .progress-circle[data-percentage] {
        --percentage: attr(data-percentage);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Progress circle animasyonu
        const progressCircles = document.querySelectorAll('.progress-circle');
        progressCircles.forEach(circle => {
            const percentage = circle.getAttribute('data-percentage');
            circle.style.setProperty('--percentage', percentage);
        });

        // Time bars animasyonu
        const timeBars = document.querySelectorAll('.time-bar');
        timeBars.forEach(bar => {
            const height = bar.style.height;
            bar.style.setProperty('--final-height', height);
        });

        // Sayaç animasyonu
        const statNumbers = document.querySelectorAll('.stat-number');
        statNumbers.forEach(number => {
            const finalValue = parseInt(number.textContent);
            let currentValue = 0;
            const increment = finalValue / 50;

            const timer = setInterval(() => {
                currentValue += increment;
                if (currentValue >= finalValue) {
                    number.textContent = finalValue;
                    clearInterval(timer);
                } else {
                    number.textContent = Math.floor(currentValue);
                }
            }, 20);
        });
    });
</script>